#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 5
#define MAX_RESOURCES 3

int allocation[MAX_PROCESSES][MAX_RESOURCES];
int maximum[MAX_PROCESSES][MAX_RESOURCES];
int need[MAX_PROCESSES][MAX_RESOURCES];
int available[MAX_RESOURCES];

void calculateNeed(int processes[]) {
    for (int i = 0; i < MAX_PROCESSES; i++) {
        for (int j = 0; j < MAX_RESOURCES; j++) {
            need[i][j] = maximum[i][j] - allocation[i][j];
        }
    }
}

bool isSafe(int processes[]) {
    int work[MAX_RESOURCES];
    bool finish[MAX_PROCESSES] = {false};
    int safeSequence[MAX_PROCESSES];
    int count = 0;

    for (int i = 0; i < MAX_RESOURCES; i++)
        work[i] = available[i];

    while (count < MAX_PROCESSES) {
        bool found = false;
        for (int p = 0; p < MAX_PROCESSES; p++) {
            if (!finish[p]) {
                int j;
                for (j = 0; j < MAX_RESOURCES; j++) {
                    if (need[p][j] > work[j])
                        break;
                }
                if (j == MAX_RESOURCES) {
                    for (int k = 0; k < MAX_RESOURCES; k++)
                        work[k] += allocation[p][k];
                    safeSequence[count++] = p;
                    finish[p] = true;
                    found = true;
                }
            }
        }
        if (!found) {
            printf("System is not in a safe state.\n");
            return false;
        }
    }
    
    printf("System is in a safe state.\nSafe sequence is: ");
    for (int i = 0; i < count; i++)
        printf("%d ", safeSequence[i]);
    printf("\n");
    return true;
}

void requestResources(int processes[], int request[], int processNumber) {
    for (int j = 0; j < MAX_RESOURCES; j++) {
        if (request[j] > need[processNumber][j]) {
            printf("Error: Process has exceeded its maximum claim.\n");
            return;
        }
    }

    for (int j = 0; j < MAX_RESOURCES; j++) {
        if (request[j] > available[j]) {
            printf("Process must wait; resources are not available.\n");
            return;
        }
    }
    for (int j = 0; j < MAX_RESOURCES; j++) {
        available[j] -= request[j];
        allocation[processNumber][j] += request[j];
        need[processNumber][j] -= request[j];
    }

    if (isSafe(processes)) {
        printf("Resources allocated successfully.\n");
    } else {
        for (int j = 0; j < MAX_RESOURCES; j++) {
            available[j] += request[j];
            allocation[processNumber][j] -= request[j];
            need[processNumber][j] += request[j];
        }
        printf("Resources allocation resulted in an unsafe state; rolled back.\n");
    }
}

int main() {
    int processes[MAX_PROCESSES] = {0, 1, 2, 3, 4};
    int max[MAX_PROCESSES][MAX_RESOURCES] = {
        {7, 5, 3},
        {3, 2, 2},
        {9, 0, 2},
        {2, 2, 2},
        {4, 3, 3}
    };

    int alloc[MAX_PROCESSES][MAX_RESOURCES] = {
        {0, 1, 0},
        {2, 0, 0},
        {3, 0, 2},
        {2, 1, 1},
        {0, 0, 2}
    };
    for (int i = 0; i < MAX_PROCESSES; i++) {
        for (int j = 0; j < MAX_RESOURCES; j++) {
            maximum[i][j] = max[i][j];
            allocation[i][j] = alloc[i][j];
        }
    }
    available[0] = 3;
    available[1] = 3;
    available[2] = 2;
    calculateNeed(processes);

    isSafe(processes);

    int request1[MAX_RESOURCES] = {1, 0, 2};
    requestResources(processes, request1, 1);

    return 0;
}
